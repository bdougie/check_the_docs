name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --frozen
    
    - name: Setup Ollama model
      run: |
        # Wait for Ollama to be ready
        timeout 60 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 2; done'
        # Pull the embedding model
        curl -X POST http://localhost:11434/api/pull -H "Content-Type: application/json" -d '{"name": "nomic-embed-text"}'
    
    - name: Run unit tests
      env:
        OLLAMA_HOST: http://localhost:11434
      run: |
        uv run pytest tests/ -v --tb=short
    
    - name: Test MCP server startup
      env:
        OLLAMA_HOST: http://localhost:11434
      run: |
        # Test that server can be imported and started
        timeout 10 uv run python -c "
        from server import mcp, chroma_manager, doc_processor
        print('MCP server components imported successfully')
        print(f'ChromaDB manager: {chroma_manager}')
        print(f'Document processor: {doc_processor}')
        "
    
    - name: Test indexing functionality
      env:
        OLLAMA_HOST: http://localhost:11434
      run: |
        # Test indexing example docs
        uv run python -c "
        import asyncio
        from server import chroma_manager, doc_processor
        from pathlib import Path
        
        async def test_indexing():
            collection = chroma_manager.get_or_create_collection('test_collection')
            docs_path = Path('./example_docs')
            if docs_path.exists():
                md_files = list(docs_path.rglob('*.md'))
                print(f'Found {len(md_files)} markdown files')
                if md_files:
                    content = md_files[0].read_text()
                    chunks = doc_processor.process_markdown(content, str(md_files[0]))
                    print(f'Processed {len(chunks)} chunks')
            else:
                print('No example_docs found, skipping indexing test')
        
        asyncio.run(test_indexing())
        "